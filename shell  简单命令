[root@localhost ~]# ps -ef | grep python | grep -v "grep" | awk '{print $2,"2"; print $3,"1"}'
28651 2
29478 1
28652 2
29478 1
28654 2
29478 1
28656 2
29478 1
29478 2
1 1
[root@localhost ~]# ps -ef | grep python | grep -v "grep" | awk '{print $2,"2"; print $3,"1"}' | sort
1 1
28651 2
28652 2
28654 2
28656 2
29478 1
29478 1
29478 1
29478 1
29478 2
[root@localhost ~]# ps -ef | grep python | grep -v "grep" | awk '{print $2,"2"; print $3,"1"}' | sort | uniq
1 1
28651 2
28652 2
28654 2
28656 2
29478 1
29478 2
[root@localhost ~]# ps -ef | grep python | grep -v "grep" | awk '{print $2,"2"; print $3,"1"}' | sort | uniq | awk '{print $1}' | sort | uniq -u
1
28651
28652
28654
28656
[root@localhost ~]# ps -ef | grep python | grep -v "grep" | awk '{print $2,"2"; print $3,"1"}' | sort | uniq | awk '{print $1}' | sort | uniq -u | wc -l
5

grep -v "grep"
反向查询去掉带有 "grep" 的
-a ：将 binary 文件以 text 文件的方式搜寻数据
-c ：计算找到 '搜寻字符串' 的次数
-i ：忽略大小写的不同，所以大小写视为相同
-n ：顺便输出行号
-v ：反向选择，亦即显示出没有 '搜寻字符串' 内容的那一行！


awk  分隔符
awk '{print $2,"2"; print $3,"1"}'
打印当前数据条的 第二个变量 和第三个变量



sort 
排序默认升序
 -r ,降序排序
 -g 、-n ，按照数值排序
 


uniq 
去重
-c或——count：在每列旁边显示该行重复出现的次数；
-d或--repeated：仅显示重复出现的行列；
-f<栏位>或--skip-fields=<栏位>：忽略比较指定的栏位；
-s<字符位置>或--skip-chars=<字符位置>：忽略比较指定的字符；
-u或——unique：仅显示出一次的行列；
-w<字符位置>或--check-chars=<字符位置>：指定要比较的字符。

wc -l
显示行数
wc -l filename 报告行数
wc -c filename 报告字节数
wc -m filename 报告字符数
wc -w filename 报告单词数

Linux shell - `dirname $0` 定位到运行脚本的相对位置
Linux shell - `basename $0` 获取当前脚本执行名


